## ディレクトリ構成
### src
- 開発用ファイルが格納される
- ReactコンポーネントのJSXファイルをここに置く

### public
- 静的ファイルを格納する
- htmlファイル、画像ファイル（ロゴ、favicon　etc）など

### build
- 本番用ファイルが格納される
- npm run buildコマンドでディレクトリが生成される

## npmコマンド
### npm start 
- ローカルサーバを立ち上げて確認できる。
- ホットリロード対応

### npm run build
- 本番用ファイルを生成してbuildディレクトリに出力する
- srcとpublicのファイルを一つにまとめる（バンドル）

### npm run eject
- WebpackやBabelの設定を変更したいときに使用する
- 基本的には使用しない

## コンポーネント
- Reactはコンポーネントを積み木のように組み合わせて開発する。
- なるべくコンポーネントは細かく分ける（コードの見通しをよくする）。
- 現在は関数コンポーネントの書き方をメインに使う（クラスコンポーネントの書き方は使用しない）
- 子コンポーネントでexport、親コンポーネントでimportする
- ver 17から以下の記述が要らなくなった。
  - import React from 'react'; 
- 1コンポーネント ＝ 1ファイル で管理すべき

## props
- 親から子へ、データを渡すために使用する
- 子コンポーネント内にpropsを宣言し、親コンポーネントに実際に渡すデータを記述する。
- データは基本的に{}内に書く
- 文字列・数値・真偽値・配列・オブジェクト・日付・変数などなんでもOK
- 文字列は{}なしでもOK

## import と export（別ファイルのコンポーネントの使い方）
1. default export（名前なしexport）
- Reactで推奨されるexport方法
- default exportするコンポーネントは、「default」という名前でexportされる。

2. default import（名前なしimport）
- default exportしたモジュールをそのまま読み込む。
- import モジュール名 from 'ファイルパス';

3. 名前付きexport
- 1ファイルから複数モジュールをexportしたいとき
- エントリポイント（exportをまとめたファイル）でよく使用する。
  - エントリポイントは慣例的に「index.js」という名前で作成される。
- 名前を任意に変更できる。
- 

4. 名前付きimport
- 1ファイルから複数モジュールを読み込む（エントリポイントから複数コンポーネントを読み込む）
- {}内に読み込むコンポーネント名を記述する。

## Hooks
- ReactではDOMを直接書き換えるのはNG（textやelementなど）。

Reactコンポーネントが再描画するきっかけ
- stateが変更されたとき
- propsが変更したとき

stateとpropsの違い
- props: 引数のようにコンポーネントに渡される値（props自体を子コンポーネント内で更新できない）
- state: コンポーネントの内部で宣言・制御される値


## useState
- set〇〇: 更新関数

## prevState
- 更新前のstateを参照する

## ライフサイクル（useEffect）
- コンポーネントが生まれてから破棄されるまでの時間の流れ
- ライフサイクルメソッドを使うと、次点に応じた処理を実行できる

### 3種類のライフサイクル
1. Mounting
コンポーネントが配置される（生まれる）期間
2. Updating
コンポーネントが変更されている（成長する）期間
3. Unmounting
コンポーネントが破棄される（死ぬ）期間（別のページに飛ぶなどで）

### 副作用（effect）フック
- レンダリングが起こるたびに実行される処理のこと。

- クリーンアップ関数
 - 再レンダリングされるまでに呼び出される。

### useEffectのユースケース
- APIやDBから非同期通信でデータを取得する（fetch）
- 特定の値が変わったらデータを再取得する（refetch）
